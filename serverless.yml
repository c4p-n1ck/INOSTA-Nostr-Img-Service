# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: nostr-image-services

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  architecture: arm64
  timeout: 29
  # HTTP Api gateway
  httpApi:
    cors: true
  environment:
    S3_BUCKET: ${self:custom.S3_BUCKET}
    DYNAMODB_TABLE: ${self:service}
    LNBITS_HOST: ${self:custom.LNBITS_HOST}
    LNBITS_API_INVOICE_KEY: ${self:custom.LNBITS_API_INVOICE_KEY}
    CLOUDFRONT_DOMAIN_NAME: ${self:custom.CLOUDFRONT_DOMAIN_NAME}
  iamRoleStatements: 
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:custom.S3_BUCKET}
            - '/*'
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: { "Fn::GetAtt": [PaymentHashTable, Arn] }


custom:
  LNBITS_HOST: ${file(./variables.yml):LNBITS_HOST}
  LNBITS_API_INVOICE_KEY: ${file(./variables.yml):LNBITS_API_INVOICE_KEY}
  DYNAMODB_TABLE: $file(./variables.yml):DYNAMODB_TABLE}
  CLOUDFRONT_DOMAIN_NAME: ${file(./variables.yml):CLOUDFRONT_DOMAIN_NAME}
  S3_BUCKET: ${file(./variables.yml):S3_BUCKET}

package:
  individually: true
  patterns:
    - '!serverless.yml'
    - '!variables.sample.yml'
    - '!variables.yml'


functions:
  checkUploadedFile:
    handler: lambda/handler-checkUploadedFile.checkUploadedFile
    logRetentionInDays: 3
    reservedConcurrency: 10
    package:
      patterns:
        - '!lambda/**'
        - lambda/handler-checkUploadedFile.js
    events: 
      - httpApi:
          path: /checkUploadedFile
          method: POST
  getPresignedUrl:
    handler: lambda/handler-getSignedUrl.getPresignedUrl
    logRetentionInDays: 3
    reservedConcurrency: 10
    package:
      patterns:
        - '!lambda/**'
        - lambda/handler-getSignedUrl.js
    events:
      - httpApi:
          path: /getSignedUrl
          method: POST
  getInvoice:
    handler: lambda/handler-getInvoice.getInvoice
    logRetentionInDays: 3
    reservedConcurrency: 10
    package:
      patterns:
          - '!lambda/**'
          - lambda/handler-getInvoice.js
    events: 
      - httpApi:
          path: /getInvoice
          method: GET

resources:
  Resources:

    ApiGatewayStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        StageName: $default
        DefaultRouteSettings:
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 10
        ApiId:
          Ref: ApiGatewayApi
    ApiGatewayApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}
        ProtocolType: HTTP

# create dynamoDB table
    PaymentHashTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}
        AttributeDefinitions:
          - AttributeName: payment_hash
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: payment_hash
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

