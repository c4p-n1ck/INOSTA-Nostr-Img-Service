# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cf-nostr-image-services

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  architecture: x86_64
  timeout: 29
  environment:
    S3_BUCKET_CF: ${self:custom.S3_BUCKET_CF}
    S3_BUCKET: ${self:custom.S3_BUCKET}
    DYNAMODB_TABLE: ${self:service}
    LNBITS_HOST: ${self:custom.LNBITS_HOST}
    LNBITS_API_INVOICE_KEY: ${self:custom.LNBITS_API_INVOICE_KEY}
  iamRoleStatements: # Signed URL will have same permissions as the IAM Role
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: { Fn::Join: ['', [{ Fn::GetAtt: [S3Bucket, Arn] }, '/*']] } # arn:aws:s3:::bucketName/*

custom:
  LNBITS_HOST: ${file(./variables.yml):LNBITS_HOST}
  LNBITS_API_INVOICE_KEY: ${file(./variables.yml):LNBITS_API_INVOICE_KEY}
  S3_BUCKET_CF: ${file(./variables.yml):S3_BUCKET_CF}
  S3_BUCKET: ${file(./variables.yml):S3_BUCKET}

package:
  individually: true
  patterns:
    - '!serverless.yml'
    - '!serverless-cloudfront.yml'
    - '!variables.sample.yml'
    - '!variables.yml'
  


   
functions:
  checkUploadedFileCf:
    handler: lambda/handler-checkUploadedFile.checkUploadedFile
    logRetentionInDays: 3
    package:
      patterns:
        - '!lambda/**'
        - lambda/handler-checkUploadedFile.js
    events: 
      - cloudFront:
          eventType: viewer-request
          origin: ${self:custom.S3_BUCKET_CF}
          includeBody: true
          pathPattern:  /*

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, POST, PUT]
              AllowedOrigins: ['*']
    S3BucketPolicy: # Allow uploaded files to be public and downloadable
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: S3Bucket }
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Resource: { Fn::Join: ['', [{ Fn::GetAtt: [S3Bucket, Arn] }, '/*']] } # arn:aws:s3:::bucketName/*
              Principal: '*'